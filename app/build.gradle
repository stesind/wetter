apply plugin: 'com.android.application'
// Project dependend signing config
//if(project.hasProperty("default.signing")
//        && new File(project.property("default.signing") + ".gradle").exists()) {
//    apply from: project.property("default.signing") + ".gradle";
//}

android {
    signingConfigs {
        config {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_7
        sourceCompatibility JavaVersion.VERSION_1_7
    }
    compileSdkVersion 25
    buildToolsVersion '25.0.0'
    defaultConfig {
        applicationId "de.sindzinski.wetter"
        minSdkVersion 23
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        signingConfig signingConfigs.config
        manifestPlaceholders = [GOOGLE_GEO_API_KEY:GoogleGeoApiKey]
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

//        jackOptions {
//            enabled true
//        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.config
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildTypes.each {
        // getting from gradle.properties in the users home folder
        it.buildConfigField 'String', 'OPEN_WEATHER_MAP_API_KEY', OpenWeatherMapApiKey
        it.buildConfigField 'String', 'WUNDERGROUND_API_KEY', WundergroundApiKey
        it.buildConfigField 'String', 'GOOGLE_MAPS_TIMEZONE_API_KEY', GoogleMapsTimeZoneApiKey
        it.buildConfigField 'String', 'GOOGLE_GEO_API_KEY', GoogleGeoApiKey
        it.resValue "string", "GOOGLE_GEO_API_KEY", GoogleGeoApiKey
    }

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
//            applicationIdSuffix = ".mock"
        }
        prod {
        }
    }
    lintOptions {
        abortOnError false
    }
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:25.2.0'
    //    compile 'com.android.support:support-annotations:25.2.0'
    compile 'com.android.support:design:25.2.0'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.google.guava:guava:18.0'
    //
    //            compile "com.google.guava:guava:25.2.0"
    compile 'com.android.support.test.espresso:espresso-idling-resource:2.2.2'
    // Dependencies for local unit tests
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.powermock:powermock-module-junit4:1.7.0RC2'
    testCompile 'org.powermock:powermock-api-mockito:1.7.0RC2'
    // Android Testing Support Library's runner and rules
    androidTestCompile 'com.android.support:support-annotations:25.2.0'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    // Espresso UI Testing dependencies.
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    // espreso-contrib requires 23.1.1 support libs - exclude this dependencies
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2.2') {
        exclude group: 'com.android.support'
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude module: 'support-v13'
        exclude module: 'recyclerview-v7'
        exclude module: 'design'
    }
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.2'
    compile 'com.google.android.gms:play-services:10.2.1'
}
/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:25.2.0"
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.compile.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
    }
}

dependencies {
    compile 'com.facebook.stetho:stetho:1.4.2'
}
dependencies {
    compile 'com.google.firebase:firebase-crash:10.0.1'
}
// Add to the bottom of the file
apply plugin: 'com.google.gms.google-services'

